// Example controller using JwtAuthGuard and CurrentUser decorator

import { Controller, Get, Post, Body, UseGuards } from '@nestjs/common';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { CurrentUser } from './decorators/current-user.decorator';
import { IJwtUserPayload } from './types/jwt.user.payload.interface';
import { AuthService } from './auth.service';

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('login')
  async login(@Body() credentials: { username: string; password: string }) {
    // Validate user (example - you would check against your database)
    // const user = await this.userService.validateUser(credentials.username, credentials.password);
    
    // Create JWT payload
    const payload: IJwtUserPayload = { id: '123' }; // Replace with actual user id
    
    // Generate token
    const token = await this.authService.generateToken(payload);
    
    return { access_token: token };
  }

  @UseGuards(JwtAuthGuard)
  @Get('profile')
  getProfile(@CurrentUser() user: IJwtUserPayload) {
    // User object is automatically populated from the JWT token
    return { id: user.id }; // Return user info or fetch more info using the user.id
  }
} 